version: '{build}'
test: off

configuration:
  - Debug
  - Release

environment:
  PYTHON: "C:\\Python38"
  WX_VERSION: 3.1.3

# Build and install markdown and wxWidgets, with our custom tweaks patch
install:
  - SET PATH=%PYTHON%;%PATH%
  - IF %CONFIGURATION%==Release python -m pip install markdown
  - call "%ProgramFiles(x86)%\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"
  - bash build-wxwidgets.sh %WX_VERSION% %CONFIGURATION%

# Cache the compiled wxWidgets so it can be in with future builds
cache:
  - '%USERPROFILE%\wxWidgets-%WX_VERSION%'

# Run premake4 to create the Visual Studio project
before_build:
  - premake4.exe --platform=x32 --wx-prefix="%USERPROFILE%/wxWidgets-%WX_VERSION%" vs2010

# Build XWord
build_script:
  - msbuild build/vs2010/XWord.sln /p:Configuration=%CONFIGURATION%
  # For release builds, also build docs and run dist steps.
  - IF %CONFIGURATION%==Release pushd doc & make_help.cmd & popd
  - IF %CONFIGURATION%==Release pushd dist & "%ProgramFiles(x86)%\NSIS\makensis.exe" /V4 XWord.nsi & popd

# Zip the full build folder and make it available as an artifact.
after_build:
  - 7z a bin\%CONFIGURATION%\XWord-Windows.zip "%APPVEYOR_BUILD_FOLDER%\bin\%CONFIGURATION%\*" -r -x!*.exp -x!*.lib -x!*.pdb -x!*.idb -x!*.ilk -x!*.fbp

artifacts:
  - path: bin\%CONFIGURATION%\XWord-Windows.zip
    name: XWord-Windows.zip

  - path: dist\XWord-Windows.exe
    name: XWord-Windows.exe

# Deploy tagged release builds to GitHub Releases
deploy:
  provider: GitHub
  auth_token:
    secure: di7vtZSm1K8JwmYD0z+PVfcDGav/KwuK4CeBdp4oKoT7ImfJ7ksFSV6zcLcW6qui
  artifact: XWord-Windows.exe
  on:
    appveyor_repo_tag: true
    configuration: Release
